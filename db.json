{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/diaspora/source/css/diaspora.css","path":"css/diaspora.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/diaspora.js","path":"js/diaspora.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","path":"photoswipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","path":"photoswipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/3.jpg","path":"img/3.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/4.jpg","path":"img/4.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/5.jpg","path":"img/5.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/6.jpg","path":"img/6.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/7.jpg","path":"img/7.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/8.jpg","path":"img/8.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/9.jpg","path":"img/9.jpg","modified":0,"renderable":1},{"_id":"themes/diaspora/source/img/10.jpg","path":"img/10.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1534484958839},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1534484958839},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1534484958839},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1534484958839},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1534484958839},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1534484958839},{"_id":"source/_posts/hello-world.md","hash":"842a8f319757e54e56dfdda6698de76b16e9cfc9","modified":1535531600001},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1534484958839},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1534484958839},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1534484958839},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1534484958839},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1534484958839},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1534484958839},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1534484958839},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1534484958839},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1534484958839},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1534484958839},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1534484958839},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1534484958839},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534484958839},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534484958839},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1534484958839},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1534484958839},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534484958839},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534484958839},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534484958839},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1534484958839},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1534484958839},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1534484958839},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1534484958839},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1534484958839},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1534484958839},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1534484958839},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1534484958839},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1534484958843},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1534484958843},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1534484958839},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1534484958839},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1534484958839},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1534484958839},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1534484958839},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1534484958839},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1534484958839},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1534484958839},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534484958843},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1534484958843},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1534484958839},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1534484958839},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1534484958839},{"_id":"themes/diaspora/.gitignore","hash":"711861c1bdc49a4d5c6704a22546dcafc31d4730","modified":1534597818983},{"_id":"themes/diaspora/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1534597818983},{"_id":"themes/diaspora/README.md","hash":"68d34d4d958661c50e7b6dac3f96b3c2ae19557e","modified":1534597818983},{"_id":"themes/diaspora/_config.yml","hash":"e174c918af3b4f6e27af285450440a1ae9ed964b","modified":1535540798044},{"_id":"themes/diaspora/layout/archive.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534597818983},{"_id":"themes/diaspora/layout/category.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534597818983},{"_id":"themes/diaspora/.git/FETCH_HEAD","hash":"2efe5efaf54bdcef886ed7a07df17d993d734059","modified":1534597839267},{"_id":"themes/diaspora/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534597818963},{"_id":"themes/diaspora/.git/ORIG_HEAD","hash":"bff30d2f502dc831d54a603b3186af70203001cc","modified":1534597839283},{"_id":"themes/diaspora/.git/config","hash":"cb6674d7dd034e5afde891de8d6f202d9e830329","modified":1534597818963},{"_id":"themes/diaspora/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534597816967},{"_id":"themes/diaspora/.git/index","hash":"32f304a10fac2f2771b209baa6e8eec04c894a60","modified":1534597818987},{"_id":"themes/diaspora/.git/packed-refs","hash":"5f7920fcaab605362712cfc8d79d9b21ab3c39c8","modified":1534597818963},{"_id":"themes/diaspora/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1534597818983},{"_id":"themes/diaspora/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1534597818983},{"_id":"themes/diaspora/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1534597818983},{"_id":"themes/diaspora/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1534597818983},{"_id":"themes/diaspora/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1534597818983},{"_id":"themes/diaspora/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1534597818983},{"_id":"themes/diaspora/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1534597818983},{"_id":"themes/diaspora/layout/index.ejs","hash":"18a90c45150a15ae0f505519a0b9d7f285b25dff","modified":1534597818983},{"_id":"themes/diaspora/layout/layout.ejs","hash":"6bb3282e8233a2b4d397d023cd81ff6cf952b6ea","modified":1534598029835},{"_id":"themes/diaspora/layout/page.ejs","hash":"eeda07da6c4f604b91a29a9a679cbf22a5c23469","modified":1534597818983},{"_id":"themes/diaspora/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1534597818983},{"_id":"themes/diaspora/layout/tag.ejs","hash":"dc62fbc1b0814658a6456b113a2d6880f7b9556d","modified":1534597818983},{"_id":"themes/diaspora/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1534597816967},{"_id":"themes/diaspora/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534597816967},{"_id":"themes/diaspora/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534597816967},{"_id":"themes/diaspora/.git/logs/HEAD","hash":"efb44c784bf5dab93c59a7ec66ff76b6687284bb","modified":1534597818963},{"_id":"themes/diaspora/layout/_partial/google-analytics.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534598159783},{"_id":"themes/diaspora/layout/_partial/head.ejs","hash":"f4ccde35521902c8de50e37318543270268a6b16","modified":1535529933612},{"_id":"themes/diaspora/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/menu.ejs","hash":"8290c3909bbd01a8532b1f72689f755248a2aac4","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/screen.ejs","hash":"cf5aac35f3b735315d9d61ba978a858d9eef17a0","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/scripts.ejs","hash":"041a2e405157447b20b5d339596f35a2ec89808c","modified":1534597818983},{"_id":"themes/diaspora/source/css/diaspora.css","hash":"79358615a394d7749efdea65efe2e1d5163faea3","modified":1534728259830},{"_id":"themes/diaspora/source/img/favicon.png","hash":"d1ddf2e84de93be79e237377bb1b5858235a5059","modified":1535528932093},{"_id":"themes/diaspora/source/img/logo.png","hash":"11265c1d326bb413bcac30faad9dfb707f5ef522","modified":1534728032042},{"_id":"themes/diaspora/source/js/diaspora.js","hash":"a213e865e2c48f15796059ce962fb7594361b3bf","modified":1534597818987},{"_id":"themes/diaspora/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1534597818987},{"_id":"themes/diaspora/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1534597818987},{"_id":"themes/diaspora/.git/objects/pack/pack-298db9532082d7869e46bbc047da4c40eb15234e.idx","hash":"97504a5f3085e9a1bbdb066a05331957cd25d9bc","modified":1534597818955},{"_id":"themes/diaspora/.git/refs/heads/master","hash":"bff30d2f502dc831d54a603b3186af70203001cc","modified":1534597818963},{"_id":"themes/diaspora/layout/_partial/post/article.ejs","hash":"86cfa39f33ec90027dbaa7c4d3364687219ea7ec","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/post/gitalk.ejs","hash":"7b684b561eca872b8e18e270c07f459ea3634676","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/post/header.ejs","hash":"716aa31922caacd176fcad3720f54bebda11e406","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/post/item.ejs","hash":"7c731538de9750fed2e0865409d24c3afa77644f","modified":1534597818983},{"_id":"themes/diaspora/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1534597818983},{"_id":"themes/diaspora/source/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1534597818983},{"_id":"themes/diaspora/source/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534597818987},{"_id":"themes/diaspora/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534597818987},{"_id":"themes/diaspora/.git/logs/refs/heads/master","hash":"efb44c784bf5dab93c59a7ec66ff76b6687284bb","modified":1534597818963},{"_id":"themes/diaspora/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534597818963},{"_id":"themes/diaspora/.git/logs/refs/remotes/origin/HEAD","hash":"efb44c784bf5dab93c59a7ec66ff76b6687284bb","modified":1534597818963},{"_id":"themes/diaspora/.git/objects/pack/pack-298db9532082d7869e46bbc047da4c40eb15234e.pack","hash":"3cd418e544074ef213f3d1650d164e8767e78e5e","modified":1534597818955},{"_id":"public/2018/08/17/hello-world/index.html","hash":"16e9545b32b38c85c163288ba6070b30eb4e19de","modified":1534728393514},{"_id":"public/archives/index.html","hash":"2b6aa90e87597c6fb1bc741f109695e9ab3f450d","modified":1534728393514},{"_id":"public/archives/2018/index.html","hash":"2b6aa90e87597c6fb1bc741f109695e9ab3f450d","modified":1534728393514},{"_id":"public/archives/2018/08/index.html","hash":"2b6aa90e87597c6fb1bc741f109695e9ab3f450d","modified":1534728393514},{"_id":"public/index.html","hash":"83c9687ca03bc52fdc0cc94c454b19ed29ca7c7b","modified":1534728393514},{"_id":"public/img/favicon.png","hash":"44722630515de2ec35c9a22fa2df9f1c4a43ee95","modified":1534728143488},{"_id":"public/img/logo.png","hash":"11265c1d326bb413bcac30faad9dfb707f5ef522","modified":1534728143488},{"_id":"public/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534597917151},{"_id":"public/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534597917151},{"_id":"public/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534597917151},{"_id":"public/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1534597917155},{"_id":"public/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1534597917155},{"_id":"public/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1534597917157},{"_id":"public/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1534597917157},{"_id":"public/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1534597917157},{"_id":"public/js/diaspora.js","hash":"a213e865e2c48f15796059ce962fb7594361b3bf","modified":1534597917159},{"_id":"public/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1534597917159},{"_id":"public/css/diaspora.css","hash":"79358615a394d7749efdea65efe2e1d5163faea3","modified":1534728393518},{"_id":"public/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1534597917161},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1534597917162},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1534597917169},{"_id":"public/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1534597917169},{"_id":"themes/diaspora/.DS_Store","hash":"765a67cb411c4ebed18796e2b4b54cd7e3a29ca5","modified":1535528985111},{"_id":"themes/diaspora/source/.DS_Store","hash":"2583c7159e54833719367ea82e20d27900c6548e","modified":1535528985110},{"_id":"themes/diaspora/source/img/1.jpg","hash":"69524a5e33e515b0364fefdb1cfd9aada6b78156","modified":1535529682327},{"_id":"themes/diaspora/source/img/2.jpg","hash":"20faca47d962a451a4d8b1500a322115dc79b465","modified":1535529672544},{"_id":"themes/diaspora/source/img/3.jpg","hash":"8c5ac9d69eb250025427d8eaca30a2cd05e5b84b","modified":1535529662183},{"_id":"themes/diaspora/source/img/4.jpg","hash":"40fdd38015224dc8393f4bbc8eeb1e4a093f00fd","modified":1535529648368},{"_id":"themes/diaspora/source/img/5.jpg","hash":"54f95566c6479109b5c032aee6b0430a8e7f92d3","modified":1535529639061},{"_id":"themes/diaspora/source/img/10.jpg","hash":"e0513a2389e1a93ef777c839ce117f5f9d7ccca2","modified":1535529571691},{"_id":"themes/diaspora/source/img/8.jpg","hash":"df045def19263588aac005570d436e4c56e8c076","modified":1535529610485},{"_id":"themes/diaspora/source/img/7.jpg","hash":"4f32e77a22511c80fd355f64181344ebe50060c9","modified":1535529617739},{"_id":"themes/diaspora/source/img/9.jpg","hash":"9c24df4805c1e897f7c8f72b4573da5e4a8f8436","modified":1535529585904},{"_id":"themes/diaspora/source/img/6.jpg","hash":"625284a1ada54bd8b57c4294b378c479db2b9b34","modified":1535529625940},{"_id":"source/_drafts/迭代器-生成器-generator-和Promise的“微妙”关系.md","hash":"ac258b0f7e2ac33a463cab964aafc1b4fff31908","modified":1535531564906},{"_id":"source/_posts/迭代器-生成器-generator-和Promise的“微妙”关系.md","hash":"ac258b0f7e2ac33a463cab964aafc1b4fff31908","modified":1535531576869},{"_id":"source/_drafts/vue-websocket-graphql中大型web应用实践.md","hash":"73f3db63a4e1e83725b88022086cb3087e84e1bd","modified":1535533761931},{"_id":"source/_posts/vue-websocket-graphql中大型web应用实践.md","hash":"488254a1adcce6f5d786fc936f3759fe9c08b43b","modified":1535534103148},{"_id":"source/about/index.md","hash":"bbffe206acf4c05b3a81d43b0d005b0b08fae37b","modified":1535533981772}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-08-29T09:12:24.000Z","_content":"#### about brian\n------\n\nweb 前端开发8年","source":"about/index.md","raw":"title: about\ndate: 2018-08-29 17:12:24\n---\n#### about brian\n------\n\nweb 前端开发8年","updated":"2018-08-29T09:13:01.772Z","path":"about/index.html","_id":"cjlex9igz0002aovoorblfqpi","comments":1,"layout":"page","content":"<h4 id=\"about-brian\"><a href=\"#about-brian\" class=\"headerlink\" title=\"about brian\"></a>about brian</h4><hr>\n<p>web 前端开发8年</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"about-brian\"><a href=\"#about-brian\" class=\"headerlink\" title=\"about brian\"></a>about brian</h4><hr>\n<p>web 前端开发8年</p>\n"}],"Post":[{"title":"开篇","date":"2018-08-29T08:33:19.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: 开篇\ndate: 2018-08-29 16:33:19\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-08-29T08:33:20.001Z","_id":"cjkxkw2qi0000bcj8zlg35q8k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"迭代器,生成器(generator)和Promise的“微妙”关系","author":"brian","date":"2018-08-29T08:09:00.000Z","_content":"> 好久没写blog了，重新开始，今天来聊聊generator，promise的关系\n\n这次主要讲讲（iterator）和生成器*/yield之间的联系和各自的用法，以及生成器的高配版本aysnc/await的使用。\n\n栏目：\n - 迭代器（iterator）\n - 生成器 */yield\n - 异步版生成器 aysnc/await\n\n\n##### 迭代器（iterator）\n----------------------\n\n\t首先迭代器这个词是什么意思呢？每一次“过程”的重复，称之为迭代。不过迭代是会保留结果的，也就说每次都是以上一次迭代的结果为基准，开始下一次的迭代。举个例子，迭代这个词经常出现在产品开发之中，每个周期都会有产品的迭代开发，但是不可能每次都是从零开始做产品，肯定是基于上一版本的产品进行开发，也就是进行迭代。\n    \n从中我们可以整理出关于迭代关键点：\n- 过程是重复的\n- 返回上一次的迭代结果\n\n那么javascript中的“迭代器”是个怎样的概念呢？\n\n\tjavascript中的迭代器，就是一个数组对象，不断地调用next重复获取过程，然后每次都返回一个结果。等到没有东西可返回了，就终止。因此next的返回对象有两个属性done和value。done表示是否结束了，value表示当前迭代的结果。当done为true的时候，表示迭代已结束，这时候是没有返回结果的也就是没有value这个属性。\n    \n- 关于迭代器，就是我们上面讨论的next方法，返回done和value（done:true时可以省略）两个参数。\n\n```js\n function iteratorFunc(){\n    let arr=[...arguments]\n    let nIndex=0\n    return {\n        next:()=>{\n            return nIndex<arr.length?\n            {value:arr[nIndex++],done:false}:{done:true}\n        }\n    }\n}\nlet a=iteratorFunc(1,2,3)\nconsole.log(a.next())//{done:false,value:1}\nconsole.log(a.next())//{done:false,value:2}\nconsole.log(a.next())//{done:false,value:3}\nconsole.log(a.next())//{done:true}\n```\n###### 可迭代“对象”\n- 关于可迭代“对象”，我们需要再对象上实现@@iterator方法，也就是[Symbol.iterator]，返回一个自定义的迭代方法，以表明这个对象是可以迭代的。有些JS内置的对象就是可迭代的，比如String，Array。\n\n> 自带的迭代事例\n\n```js\n  let str=\"我是欢乐的迭代器\"\n  let b=str[Symbol.iterator]()\n  console.log(b.next())//{value: \"I\", done: false}\n  console.log(b.next())//{value: \"M\", done: false}\n  console.log(b.next())//{value: \"B\", done: false}\n```\n\n> 自定义迭代方法\n\n```js\n  str[Symbol.iterator] = function() {\n      return { // this is the iterator object, returning a single element, the string \"bye\"\n        next: function() {\n          this._index += 2\n          if (this._index<str.length) {\n            return { value: str[this._index], done: false };\n          } else {\n            return { done: true };\n          }\n        },\n        _index:-2\n      };\n  };\n  let c=str[Symbol.iterator]()\n  console.log(c.next())//{value: \"I\", done: false}\n  console.log(c.next())//{value: \"M\", done: false}\n  console.log(c.next())//{value: \"B\", done: false}\n  console.log(c.next())//{value: \"R\", done: false}\n  console.log(c.next())//{done: true}\n```\n\n##### 生成器-generator\n----------------------\n\n> 生成器(generator)，专门帮我们生成迭代器\n\n```js\n  function * g(){}\n  let it= g()\n  console.log(it.next())//{value: undefined, done: true}\n```\n\n> 比较老土的实现方法\n```js\n  str[Symbol.iterator]= function * (){\n      let index=-2;\n      while(index<this.length){\n          index += 2\n          yield this[index]\n      }\n  }\n  let kk=str[Symbol.iterator]()\n  console.log(kk.next())//{value: \"I\", done: false}\n  console.log(kk.next())//{value: \"M\", done: false}\n  console.log(kk.next())//{value: \"B\", done: false}\n  console.log(kk.next())//{value: \"R\", done: false}\n```\n> 生成器到底干了什么？\n- yield 的返回值是啥？\n- 执行顺序是什么样的？\n\n```js\n  function * gy(){\n      console.log(\"zero\")\n      let fisrt=yield \"first\"\n      console.log(\"fisrt\",fisrt)\n      let second=yield \"first\"\n      console.log(\"second\",second)\n  }\n  let ity= gy()\n```\n> run code\n```bash\n> ity.next() # zero\n> ity.next() # first undefined\n> ity.next(\"third\") # second third\n```\n> 由此可见next每次都停止在yield就不再继续执行。yield每次返回的都是当前的ity.next(value)和value的值\n\n###### aysnc/await\n\n> 对于Promise这个对象的迭代器，我们该怎么处理。也就是每个迭代器都是异步的\n\n```js\n  function setTime(value,id){\n      return new Promise((r,j)=>setTimeout(() => {\n          console.log(value)\n          r(id)\n      }, 10))\n  }\n  function *a(){\n      let r1 = yield setTime(\"first\",1)\n      console.log(r1)\n      let r2 =yield setTime(\"second\",2)\n      console.log(r2)\n      let r3 =yield setTime(\"third\",3)\n      console.log(r3)\n  }\n  let k=a();\n  new Promise((resolve,reject)=>{\n      function next(data){\n          let {value,done}=k.next(data)\n          //k.next()返回一个promise,因此可以then\n          if(!done){\n              value.then((data)=>{\n                  console.log(data)\n                  next(data)\n              })\n          }\n      }\n      next();\n  })\n```\n\n> 这个时候aysnc/await就可以出场了。只需要把*/yield无缝改成aysnc/await即可。\n\n```js\nasync function a() {\n    let r1 = await setTime(\"first\",1)\n    console.log(r1)\n    let r2 = await setTime(\"second\",2)\n    console.log(r2)\n    let r3 = await setTime(\"third\",3)\n    console.log(r3)\n}\na()\n```","source":"_posts/迭代器-生成器-generator-和Promise的“微妙”关系.md","raw":"title: '迭代器,生成器(generator)和Promise的“微妙”关系'\nauthor: brian\ntags: []\ncategories: []\ndate: 2018-08-29 16:09:00\n---\n> 好久没写blog了，重新开始，今天来聊聊generator，promise的关系\n\n这次主要讲讲（iterator）和生成器*/yield之间的联系和各自的用法，以及生成器的高配版本aysnc/await的使用。\n\n栏目：\n - 迭代器（iterator）\n - 生成器 */yield\n - 异步版生成器 aysnc/await\n\n\n##### 迭代器（iterator）\n----------------------\n\n\t首先迭代器这个词是什么意思呢？每一次“过程”的重复，称之为迭代。不过迭代是会保留结果的，也就说每次都是以上一次迭代的结果为基准，开始下一次的迭代。举个例子，迭代这个词经常出现在产品开发之中，每个周期都会有产品的迭代开发，但是不可能每次都是从零开始做产品，肯定是基于上一版本的产品进行开发，也就是进行迭代。\n    \n从中我们可以整理出关于迭代关键点：\n- 过程是重复的\n- 返回上一次的迭代结果\n\n那么javascript中的“迭代器”是个怎样的概念呢？\n\n\tjavascript中的迭代器，就是一个数组对象，不断地调用next重复获取过程，然后每次都返回一个结果。等到没有东西可返回了，就终止。因此next的返回对象有两个属性done和value。done表示是否结束了，value表示当前迭代的结果。当done为true的时候，表示迭代已结束，这时候是没有返回结果的也就是没有value这个属性。\n    \n- 关于迭代器，就是我们上面讨论的next方法，返回done和value（done:true时可以省略）两个参数。\n\n```js\n function iteratorFunc(){\n    let arr=[...arguments]\n    let nIndex=0\n    return {\n        next:()=>{\n            return nIndex<arr.length?\n            {value:arr[nIndex++],done:false}:{done:true}\n        }\n    }\n}\nlet a=iteratorFunc(1,2,3)\nconsole.log(a.next())//{done:false,value:1}\nconsole.log(a.next())//{done:false,value:2}\nconsole.log(a.next())//{done:false,value:3}\nconsole.log(a.next())//{done:true}\n```\n###### 可迭代“对象”\n- 关于可迭代“对象”，我们需要再对象上实现@@iterator方法，也就是[Symbol.iterator]，返回一个自定义的迭代方法，以表明这个对象是可以迭代的。有些JS内置的对象就是可迭代的，比如String，Array。\n\n> 自带的迭代事例\n\n```js\n  let str=\"我是欢乐的迭代器\"\n  let b=str[Symbol.iterator]()\n  console.log(b.next())//{value: \"I\", done: false}\n  console.log(b.next())//{value: \"M\", done: false}\n  console.log(b.next())//{value: \"B\", done: false}\n```\n\n> 自定义迭代方法\n\n```js\n  str[Symbol.iterator] = function() {\n      return { // this is the iterator object, returning a single element, the string \"bye\"\n        next: function() {\n          this._index += 2\n          if (this._index<str.length) {\n            return { value: str[this._index], done: false };\n          } else {\n            return { done: true };\n          }\n        },\n        _index:-2\n      };\n  };\n  let c=str[Symbol.iterator]()\n  console.log(c.next())//{value: \"I\", done: false}\n  console.log(c.next())//{value: \"M\", done: false}\n  console.log(c.next())//{value: \"B\", done: false}\n  console.log(c.next())//{value: \"R\", done: false}\n  console.log(c.next())//{done: true}\n```\n\n##### 生成器-generator\n----------------------\n\n> 生成器(generator)，专门帮我们生成迭代器\n\n```js\n  function * g(){}\n  let it= g()\n  console.log(it.next())//{value: undefined, done: true}\n```\n\n> 比较老土的实现方法\n```js\n  str[Symbol.iterator]= function * (){\n      let index=-2;\n      while(index<this.length){\n          index += 2\n          yield this[index]\n      }\n  }\n  let kk=str[Symbol.iterator]()\n  console.log(kk.next())//{value: \"I\", done: false}\n  console.log(kk.next())//{value: \"M\", done: false}\n  console.log(kk.next())//{value: \"B\", done: false}\n  console.log(kk.next())//{value: \"R\", done: false}\n```\n> 生成器到底干了什么？\n- yield 的返回值是啥？\n- 执行顺序是什么样的？\n\n```js\n  function * gy(){\n      console.log(\"zero\")\n      let fisrt=yield \"first\"\n      console.log(\"fisrt\",fisrt)\n      let second=yield \"first\"\n      console.log(\"second\",second)\n  }\n  let ity= gy()\n```\n> run code\n```bash\n> ity.next() # zero\n> ity.next() # first undefined\n> ity.next(\"third\") # second third\n```\n> 由此可见next每次都停止在yield就不再继续执行。yield每次返回的都是当前的ity.next(value)和value的值\n\n###### aysnc/await\n\n> 对于Promise这个对象的迭代器，我们该怎么处理。也就是每个迭代器都是异步的\n\n```js\n  function setTime(value,id){\n      return new Promise((r,j)=>setTimeout(() => {\n          console.log(value)\n          r(id)\n      }, 10))\n  }\n  function *a(){\n      let r1 = yield setTime(\"first\",1)\n      console.log(r1)\n      let r2 =yield setTime(\"second\",2)\n      console.log(r2)\n      let r3 =yield setTime(\"third\",3)\n      console.log(r3)\n  }\n  let k=a();\n  new Promise((resolve,reject)=>{\n      function next(data){\n          let {value,done}=k.next(data)\n          //k.next()返回一个promise,因此可以then\n          if(!done){\n              value.then((data)=>{\n                  console.log(data)\n                  next(data)\n              })\n          }\n      }\n      next();\n  })\n```\n\n> 这个时候aysnc/await就可以出场了。只需要把*/yield无缝改成aysnc/await即可。\n\n```js\nasync function a() {\n    let r1 = await setTime(\"first\",1)\n    console.log(r1)\n    let r2 = await setTime(\"second\",2)\n    console.log(r2)\n    let r3 = await setTime(\"third\",3)\n    console.log(r3)\n}\na()\n```","slug":"迭代器-生成器-generator-和Promise的“微妙”关系","published":1,"updated":"2018-08-29T08:32:56.869Z","_id":"cjlev0u3l0000aovooqevrlz4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>好久没写blog了，重新开始，今天来聊聊generator，promise的关系</p>\n</blockquote>\n<p>这次主要讲讲（iterator）和生成器*/yield之间的联系和各自的用法，以及生成器的高配版本aysnc/await的使用。</p>\n<p>栏目：</p>\n<ul>\n<li>迭代器（iterator）</li>\n<li>生成器 */yield</li>\n<li>异步版生成器 aysnc/await</li>\n</ul>\n<h5 id=\"迭代器（iterator）\"><a href=\"#迭代器（iterator）\" class=\"headerlink\" title=\"迭代器（iterator）\"></a>迭代器（iterator）</h5><hr>\n<pre><code>首先迭代器这个词是什么意思呢？每一次“过程”的重复，称之为迭代。不过迭代是会保留结果的，也就说每次都是以上一次迭代的结果为基准，开始下一次的迭代。举个例子，迭代这个词经常出现在产品开发之中，每个周期都会有产品的迭代开发，但是不可能每次都是从零开始做产品，肯定是基于上一版本的产品进行开发，也就是进行迭代。\n</code></pre><p>从中我们可以整理出关于迭代关键点：</p>\n<ul>\n<li>过程是重复的</li>\n<li>返回上一次的迭代结果</li>\n</ul>\n<p>那么javascript中的“迭代器”是个怎样的概念呢？</p>\n<pre><code>javascript中的迭代器，就是一个数组对象，不断地调用next重复获取过程，然后每次都返回一个结果。等到没有东西可返回了，就终止。因此next的返回对象有两个属性done和value。done表示是否结束了，value表示当前迭代的结果。当done为true的时候，表示迭代已结束，这时候是没有返回结果的也就是没有value这个属性。\n</code></pre><ul>\n<li>关于迭代器，就是我们上面讨论的next方法，返回done和value（done:true时可以省略）两个参数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iteratorFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr=[...arguments]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nIndex=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        next:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nIndex&lt;arr.length?</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:arr[nIndex++],<span class=\"attr\">done</span>:<span class=\"literal\">false</span>&#125;:&#123;<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a=iteratorFunc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:true&#125;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"可迭代“对象”\"><a href=\"#可迭代“对象”\" class=\"headerlink\" title=\"可迭代“对象”\"></a>可迭代“对象”</h6><ul>\n<li>关于可迭代“对象”，我们需要再对象上实现@@iterator方法，也就是[Symbol.iterator]，返回一个自定义的迭代方法，以表明这个对象是可以迭代的。有些JS内置的对象就是可迭代的，比如String，Array。</li>\n</ul>\n<blockquote>\n<p>自带的迭代事例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"我是欢乐的迭代器\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>自定义迭代方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// this is the iterator object, returning a single element, the string \"bye\"</span></span><br><span class=\"line\">      next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._index += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._index&lt;str.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: str[<span class=\"keyword\">this</span>._index], <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      _index:<span class=\"number\">-2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"R\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"生成器-generator\"><a href=\"#生成器-generator\" class=\"headerlink\" title=\"生成器-generator\"></a>生成器-generator</h5><hr>\n<blockquote>\n<p>生成器(generator)，专门帮我们生成迭代器</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it= g()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next())<span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比较老土的实现方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"built_in\">Symbol</span>.iterator]= <span class=\"function\"><span class=\"keyword\">function</span> * (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index=<span class=\"number\">-2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&lt;<span class=\"keyword\">this</span>.length)&#123;</span><br><span class=\"line\">        index += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kk=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"R\", done: false&#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>生成器到底干了什么？</p>\n<ul>\n<li>yield 的返回值是啥？</li>\n<li>执行顺序是什么样的？</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gy</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"zero\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fisrt=<span class=\"keyword\">yield</span> <span class=\"string\">\"first\"</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fisrt\"</span>,fisrt)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> second=<span class=\"keyword\">yield</span> <span class=\"string\">\"first\"</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second\"</span>,second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ity= gy()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>run code<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ity.next() <span class=\"comment\"># zero</span></span><br><span class=\"line\">&gt; ity.next() <span class=\"comment\"># first undefined</span></span><br><span class=\"line\">&gt; ity.next(<span class=\"string\">\"third\"</span>) <span class=\"comment\"># second third</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>由此可见next每次都停止在yield就不再继续执行。yield每次返回的都是当前的ity.next(value)和value的值</p>\n</blockquote>\n<h6 id=\"aysnc-await\"><a href=\"#aysnc-await\" class=\"headerlink\" title=\"aysnc/await\"></a>aysnc/await</h6><blockquote>\n<p>对于Promise这个对象的迭代器，我们该怎么处理。也就是每个迭代器都是异步的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTime</span>(<span class=\"params\">value,id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">r,j</span>)=&gt;</span>setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        r(id)</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r1 = <span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"first\"</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r2 =<span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"second\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r3 =<span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"third\"</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> k=a();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;value,done&#125;=k.next(data)</span><br><span class=\"line\">        <span class=\"comment\">//k.next()返回一个promise,因此可以then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!done)&#123;</span><br><span class=\"line\">            value.then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">                next(data)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个时候aysnc/await就可以出场了。只需要把*/yield无缝改成aysnc/await即可。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r1 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"first\"</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r2 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"second\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r3 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"third\"</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>好久没写blog了，重新开始，今天来聊聊generator，promise的关系</p>\n</blockquote>\n<p>这次主要讲讲（iterator）和生成器*/yield之间的联系和各自的用法，以及生成器的高配版本aysnc/await的使用。</p>\n<p>栏目：</p>\n<ul>\n<li>迭代器（iterator）</li>\n<li>生成器 */yield</li>\n<li>异步版生成器 aysnc/await</li>\n</ul>\n<h5 id=\"迭代器（iterator）\"><a href=\"#迭代器（iterator）\" class=\"headerlink\" title=\"迭代器（iterator）\"></a>迭代器（iterator）</h5><hr>\n<pre><code>首先迭代器这个词是什么意思呢？每一次“过程”的重复，称之为迭代。不过迭代是会保留结果的，也就说每次都是以上一次迭代的结果为基准，开始下一次的迭代。举个例子，迭代这个词经常出现在产品开发之中，每个周期都会有产品的迭代开发，但是不可能每次都是从零开始做产品，肯定是基于上一版本的产品进行开发，也就是进行迭代。\n</code></pre><p>从中我们可以整理出关于迭代关键点：</p>\n<ul>\n<li>过程是重复的</li>\n<li>返回上一次的迭代结果</li>\n</ul>\n<p>那么javascript中的“迭代器”是个怎样的概念呢？</p>\n<pre><code>javascript中的迭代器，就是一个数组对象，不断地调用next重复获取过程，然后每次都返回一个结果。等到没有东西可返回了，就终止。因此next的返回对象有两个属性done和value。done表示是否结束了，value表示当前迭代的结果。当done为true的时候，表示迭代已结束，这时候是没有返回结果的也就是没有value这个属性。\n</code></pre><ul>\n<li>关于迭代器，就是我们上面讨论的next方法，返回done和value（done:true时可以省略）两个参数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iteratorFunc</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr=[...arguments]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nIndex=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        next:<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nIndex&lt;arr.length?</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:arr[nIndex++],<span class=\"attr\">done</span>:<span class=\"literal\">false</span>&#125;:&#123;<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a=iteratorFunc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:false,value:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.next())<span class=\"comment\">//&#123;done:true&#125;</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"可迭代“对象”\"><a href=\"#可迭代“对象”\" class=\"headerlink\" title=\"可迭代“对象”\"></a>可迭代“对象”</h6><ul>\n<li>关于可迭代“对象”，我们需要再对象上实现@@iterator方法，也就是[Symbol.iterator]，返回一个自定义的迭代方法，以表明这个对象是可以迭代的。有些JS内置的对象就是可迭代的，比如String，Array。</li>\n</ul>\n<blockquote>\n<p>自带的迭代事例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str=<span class=\"string\">\"我是欢乐的迭代器\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>自定义迭代方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// this is the iterator object, returning a single element, the string \"bye\"</span></span><br><span class=\"line\">      next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._index += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._index&lt;str.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: str[<span class=\"keyword\">this</span>._index], <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      _index:<span class=\"number\">-2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;value: \"R\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.next())<span class=\"comment\">//&#123;done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"生成器-generator\"><a href=\"#生成器-generator\" class=\"headerlink\" title=\"生成器-generator\"></a>生成器-generator</h5><hr>\n<blockquote>\n<p>生成器(generator)，专门帮我们生成迭代器</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it= g()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next())<span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>比较老土的实现方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str[<span class=\"built_in\">Symbol</span>.iterator]= <span class=\"function\"><span class=\"keyword\">function</span> * (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index=<span class=\"number\">-2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&lt;<span class=\"keyword\">this</span>.length)&#123;</span><br><span class=\"line\">        index += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>[index]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> kk=str[<span class=\"built_in\">Symbol</span>.iterator]()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"I\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"M\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"B\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(kk.next())<span class=\"comment\">//&#123;value: \"R\", done: false&#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>生成器到底干了什么？</p>\n<ul>\n<li>yield 的返回值是啥？</li>\n<li>执行顺序是什么样的？</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gy</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"zero\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fisrt=<span class=\"keyword\">yield</span> <span class=\"string\">\"first\"</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fisrt\"</span>,fisrt)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> second=<span class=\"keyword\">yield</span> <span class=\"string\">\"first\"</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"second\"</span>,second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ity= gy()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>run code<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ity.next() <span class=\"comment\"># zero</span></span><br><span class=\"line\">&gt; ity.next() <span class=\"comment\"># first undefined</span></span><br><span class=\"line\">&gt; ity.next(<span class=\"string\">\"third\"</span>) <span class=\"comment\"># second third</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>由此可见next每次都停止在yield就不再继续执行。yield每次返回的都是当前的ity.next(value)和value的值</p>\n</blockquote>\n<h6 id=\"aysnc-await\"><a href=\"#aysnc-await\" class=\"headerlink\" title=\"aysnc/await\"></a>aysnc/await</h6><blockquote>\n<p>对于Promise这个对象的迭代器，我们该怎么处理。也就是每个迭代器都是异步的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTime</span>(<span class=\"params\">value,id</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">r,j</span>)=&gt;</span>setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        r(id)</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r1 = <span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"first\"</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r2 =<span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"second\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r3 =<span class=\"keyword\">yield</span> setTime(<span class=\"string\">\"third\"</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> k=a();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123;value,done&#125;=k.next(data)</span><br><span class=\"line\">        <span class=\"comment\">//k.next()返回一个promise,因此可以then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!done)&#123;</span><br><span class=\"line\">            value.then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">                next(data)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个时候aysnc/await就可以出场了。只需要把*/yield无缝改成aysnc/await即可。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r1 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"first\"</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r2 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"second\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r2)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> r3 = <span class=\"keyword\">await</span> setTime(<span class=\"string\">\"third\"</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(r3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>"},{"title":"vue+websocket+graphql中大型web应用实践","author":"brian","date":"2018-08-29T08:39:17.000Z","_content":"> 随着前端框架的不断成熟，MVVM已成为主流的WEB前端开发框架，今天我给大家带来之前项目中的vue的实践\n\n--------------\n> 项目介绍，这个项目主要是app内嵌h5，前后端分离都是共识了，前后端分离不知大家有没有遇到这样一个问题（通病），后端提供接口开发的人员往往写好接口给前端开发对接后基本没文档，如接口发生改变，传参，返回数据有变动，前端异常情况，背锅的总是前端出问题。在这样的前提下，我们找到了一个比较的解决方案Graphql的应用，下面我就一一给大家讲解一下项目中如何使用\n\n\n如果对graphql还不大了解的可以去官网了解下 https://graphql.cn/\n>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n他的好处就是，后端提供多少可用使用的数据字段，前端开发可根据需求传递定制。\n\n\n项目结构：\n\n```bash\n> build/\n  config/\n  src/\n\tassets/\n    \t# css, scss, img\n    components/\n    \t# 组建\n    controller/\n    \tindex.js # 入口文件\n    \tgraphql.js # graphql 封装\n        websocket.js # 长链接封装\n    router/\n    \trouter.js # vue-router 路由\n    utils/\n    \tapi.js # axios ajax 封装\n        utils.js # 通用库\n    views/\n    \t# page\n    vuex/\n    \t# vuex store module\n  static/\n  \t# 公共图片，js\n  test/\n  \t# test.js\n  index.html\n```\n\n> 整个项目使用vue构建，vue-router做页面路由，vuex 状态树管理\n\n关键流程实现\n\n1. ajax的封装\n\n```js\n// api.js 代码片段\n\nlet ajax = (opt) => {\n\tlet options = {\n    \tmethod: opt.type,\n        url: opt.url,\n        headers: opt.headers,\n        timeout: 1000\n    }\n    return axios(options).catch((e) => {\n    \tif (e) {\n        \tconsole.log('ajax error', e.toString())\n        }\n    })\n}\n```\n\n2. graphql 接口实现\n\n```js\n// graphql.js 代码片段\nconst postGraphql = (query, data) => {\n\treturn Prom((resolve, reject) => {\n    \tajax.post({\n        \turl: <url>,\n            data: {\n            \tquery: query,\n                ...data\n            }\n        }).then(({ data }) => {\n        \tresolve(data)\n        }).catch(e => {\n        \treject(e)\n        })\n    })\n}\nexport {\n\tpostGraphql\n}\n```\n\n3. 实现调用\n\n```js\n// index.js 调度模块\nlet getData = (data)=> {\n\tlet queryString = `\n\tquery {\n\trankList(slug: \"${slug}\", page: ${page}, pageSize: ${page_size}) {\n        userId\n        rank\n        score\n        user {\n          ${DATA_MODEL.USER}\n          glamour\n          level{\n            level\n            exp\n            levelName\n          }\n        }\n      }\n    }\n    `\n    return postGraphql(queryString)\n}\n```\n\n4. 页面调用\n\n```js\n# vue 页面调用\nimport getData from index\nlet data = getData({page: 1, slug: 'a', page_size: 10})\n```","source":"_posts/vue-websocket-graphql中大型web应用实践.md","raw":"title: vue+websocket+graphql中大型web应用实践\nauthor: brian\ndate: 2018-08-29 16:39:17\ntags:\n---\n> 随着前端框架的不断成熟，MVVM已成为主流的WEB前端开发框架，今天我给大家带来之前项目中的vue的实践\n\n--------------\n> 项目介绍，这个项目主要是app内嵌h5，前后端分离都是共识了，前后端分离不知大家有没有遇到这样一个问题（通病），后端提供接口开发的人员往往写好接口给前端开发对接后基本没文档，如接口发生改变，传参，返回数据有变动，前端异常情况，背锅的总是前端出问题。在这样的前提下，我们找到了一个比较的解决方案Graphql的应用，下面我就一一给大家讲解一下项目中如何使用\n\n\n如果对graphql还不大了解的可以去官网了解下 https://graphql.cn/\n>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。\n\n他的好处就是，后端提供多少可用使用的数据字段，前端开发可根据需求传递定制。\n\n\n项目结构：\n\n```bash\n> build/\n  config/\n  src/\n\tassets/\n    \t# css, scss, img\n    components/\n    \t# 组建\n    controller/\n    \tindex.js # 入口文件\n    \tgraphql.js # graphql 封装\n        websocket.js # 长链接封装\n    router/\n    \trouter.js # vue-router 路由\n    utils/\n    \tapi.js # axios ajax 封装\n        utils.js # 通用库\n    views/\n    \t# page\n    vuex/\n    \t# vuex store module\n  static/\n  \t# 公共图片，js\n  test/\n  \t# test.js\n  index.html\n```\n\n> 整个项目使用vue构建，vue-router做页面路由，vuex 状态树管理\n\n关键流程实现\n\n1. ajax的封装\n\n```js\n// api.js 代码片段\n\nlet ajax = (opt) => {\n\tlet options = {\n    \tmethod: opt.type,\n        url: opt.url,\n        headers: opt.headers,\n        timeout: 1000\n    }\n    return axios(options).catch((e) => {\n    \tif (e) {\n        \tconsole.log('ajax error', e.toString())\n        }\n    })\n}\n```\n\n2. graphql 接口实现\n\n```js\n// graphql.js 代码片段\nconst postGraphql = (query, data) => {\n\treturn Prom((resolve, reject) => {\n    \tajax.post({\n        \turl: <url>,\n            data: {\n            \tquery: query,\n                ...data\n            }\n        }).then(({ data }) => {\n        \tresolve(data)\n        }).catch(e => {\n        \treject(e)\n        })\n    })\n}\nexport {\n\tpostGraphql\n}\n```\n\n3. 实现调用\n\n```js\n// index.js 调度模块\nlet getData = (data)=> {\n\tlet queryString = `\n\tquery {\n\trankList(slug: \"${slug}\", page: ${page}, pageSize: ${page_size}) {\n        userId\n        rank\n        score\n        user {\n          ${DATA_MODEL.USER}\n          glamour\n          level{\n            level\n            exp\n            levelName\n          }\n        }\n      }\n    }\n    `\n    return postGraphql(queryString)\n}\n```\n\n4. 页面调用\n\n```js\n# vue 页面调用\nimport getData from index\nlet data = getData({page: 1, slug: 'a', page_size: 10})\n```","slug":"vue-websocket-graphql中大型web应用实践","published":1,"updated":"2018-08-29T09:15:03.148Z","_id":"cjlew2q8r0001aovoh3fn72d6","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>随着前端框架的不断成熟，MVVM已成为主流的WEB前端开发框架，今天我给大家带来之前项目中的vue的实践</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>项目介绍，这个项目主要是app内嵌h5，前后端分离都是共识了，前后端分离不知大家有没有遇到这样一个问题（通病），后端提供接口开发的人员往往写好接口给前端开发对接后基本没文档，如接口发生改变，传参，返回数据有变动，前端异常情况，背锅的总是前端出问题。在这样的前提下，我们找到了一个比较的解决方案Graphql的应用，下面我就一一给大家讲解一下项目中如何使用</p>\n</blockquote>\n<p>如果对graphql还不大了解的可以去官网了解下 <a href=\"https://graphql.cn/\" target=\"_blank\" rel=\"noopener\">https://graphql.cn/</a></p>\n<blockquote>\n<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n</blockquote>\n<p>他的好处就是，后端提供多少可用使用的数据字段，前端开发可根据需求传递定制。</p>\n<p>项目结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; build/</span><br><span class=\"line\">  config/</span><br><span class=\"line\">  src/</span><br><span class=\"line\">\tassets/</span><br><span class=\"line\">    \t<span class=\"comment\"># css, scss, img</span></span><br><span class=\"line\">    components/</span><br><span class=\"line\">    \t<span class=\"comment\"># 组建</span></span><br><span class=\"line\">    controller/</span><br><span class=\"line\">    \tindex.js <span class=\"comment\"># 入口文件</span></span><br><span class=\"line\">    \tgraphql.js <span class=\"comment\"># graphql 封装</span></span><br><span class=\"line\">        websocket.js <span class=\"comment\"># 长链接封装</span></span><br><span class=\"line\">    router/</span><br><span class=\"line\">    \trouter.js <span class=\"comment\"># vue-router 路由</span></span><br><span class=\"line\">    utils/</span><br><span class=\"line\">    \tapi.js <span class=\"comment\"># axios ajax 封装</span></span><br><span class=\"line\">        utils.js <span class=\"comment\"># 通用库</span></span><br><span class=\"line\">    views/</span><br><span class=\"line\">    \t<span class=\"comment\"># page</span></span><br><span class=\"line\">    vuex/</span><br><span class=\"line\">    \t<span class=\"comment\"># vuex store module</span></span><br><span class=\"line\">  static/</span><br><span class=\"line\">  \t<span class=\"comment\"># 公共图片，js</span></span><br><span class=\"line\">  <span class=\"built_in\">test</span>/</span><br><span class=\"line\">  \t<span class=\"comment\"># test.js</span></span><br><span class=\"line\">  index.html</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>整个项目使用vue构建，vue-router做页面路由，vuex 状态树管理</p>\n</blockquote>\n<p>关键流程实现</p>\n<ol>\n<li>ajax的封装</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api.js 代码片段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ajax = <span class=\"function\">(<span class=\"params\">opt</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    \tmethod: opt.type,</span><br><span class=\"line\">        url: opt.url,</span><br><span class=\"line\">        headers: opt.headers,</span><br><span class=\"line\">        timeout: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(options).catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">        \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ajax error'</span>, e.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>graphql 接口实现</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// graphql.js 代码片段</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> postGraphql = <span class=\"function\">(<span class=\"params\">query, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Prom(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \tajax.post(&#123;</span><br><span class=\"line\">        \turl: &lt;url&gt;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">            \tquery: query,</span><br><span class=\"line\">                ...data</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).then((&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">        \tresolve(data)</span><br><span class=\"line\">        &#125;).catch(e =&gt; &#123;</span><br><span class=\"line\">        \treject(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">\tpostGraphql</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>实现调用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 调度模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> queryString = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\tquery &#123;</span></span><br><span class=\"line\"><span class=\"string\">\trankList(slug: \"<span class=\"subst\">$&#123;slug&#125;</span>\", page: <span class=\"subst\">$&#123;page&#125;</span>, pageSize: <span class=\"subst\">$&#123;page_size&#125;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        userId</span></span><br><span class=\"line\"><span class=\"string\">        rank</span></span><br><span class=\"line\"><span class=\"string\">        score</span></span><br><span class=\"line\"><span class=\"string\">        user &#123;</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"subst\">$&#123;DATA_MODEL.USER&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">          glamour</span></span><br><span class=\"line\"><span class=\"string\">          level&#123;</span></span><br><span class=\"line\"><span class=\"string\">            level</span></span><br><span class=\"line\"><span class=\"string\">            exp</span></span><br><span class=\"line\"><span class=\"string\">            levelName</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> postGraphql(queryString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>页面调用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue 页面调用</span><br><span class=\"line\"><span class=\"keyword\">import</span> getData <span class=\"keyword\">from</span> index</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = getData(&#123;<span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"attr\">slug</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">page_size</span>: <span class=\"number\">10</span>&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>随着前端框架的不断成熟，MVVM已成为主流的WEB前端开发框架，今天我给大家带来之前项目中的vue的实践</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>项目介绍，这个项目主要是app内嵌h5，前后端分离都是共识了，前后端分离不知大家有没有遇到这样一个问题（通病），后端提供接口开发的人员往往写好接口给前端开发对接后基本没文档，如接口发生改变，传参，返回数据有变动，前端异常情况，背锅的总是前端出问题。在这样的前提下，我们找到了一个比较的解决方案Graphql的应用，下面我就一一给大家讲解一下项目中如何使用</p>\n</blockquote>\n<p>如果对graphql还不大了解的可以去官网了解下 <a href=\"https://graphql.cn/\" target=\"_blank\" rel=\"noopener\">https://graphql.cn/</a></p>\n<blockquote>\n<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\n</blockquote>\n<p>他的好处就是，后端提供多少可用使用的数据字段，前端开发可根据需求传递定制。</p>\n<p>项目结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; build/</span><br><span class=\"line\">  config/</span><br><span class=\"line\">  src/</span><br><span class=\"line\">\tassets/</span><br><span class=\"line\">    \t<span class=\"comment\"># css, scss, img</span></span><br><span class=\"line\">    components/</span><br><span class=\"line\">    \t<span class=\"comment\"># 组建</span></span><br><span class=\"line\">    controller/</span><br><span class=\"line\">    \tindex.js <span class=\"comment\"># 入口文件</span></span><br><span class=\"line\">    \tgraphql.js <span class=\"comment\"># graphql 封装</span></span><br><span class=\"line\">        websocket.js <span class=\"comment\"># 长链接封装</span></span><br><span class=\"line\">    router/</span><br><span class=\"line\">    \trouter.js <span class=\"comment\"># vue-router 路由</span></span><br><span class=\"line\">    utils/</span><br><span class=\"line\">    \tapi.js <span class=\"comment\"># axios ajax 封装</span></span><br><span class=\"line\">        utils.js <span class=\"comment\"># 通用库</span></span><br><span class=\"line\">    views/</span><br><span class=\"line\">    \t<span class=\"comment\"># page</span></span><br><span class=\"line\">    vuex/</span><br><span class=\"line\">    \t<span class=\"comment\"># vuex store module</span></span><br><span class=\"line\">  static/</span><br><span class=\"line\">  \t<span class=\"comment\"># 公共图片，js</span></span><br><span class=\"line\">  <span class=\"built_in\">test</span>/</span><br><span class=\"line\">  \t<span class=\"comment\"># test.js</span></span><br><span class=\"line\">  index.html</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>整个项目使用vue构建，vue-router做页面路由，vuex 状态树管理</p>\n</blockquote>\n<p>关键流程实现</p>\n<ol>\n<li>ajax的封装</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// api.js 代码片段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ajax = <span class=\"function\">(<span class=\"params\">opt</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    \tmethod: opt.type,</span><br><span class=\"line\">        url: opt.url,</span><br><span class=\"line\">        headers: opt.headers,</span><br><span class=\"line\">        timeout: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios(options).catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">        \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'ajax error'</span>, e.toString())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>graphql 接口实现</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// graphql.js 代码片段</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> postGraphql = <span class=\"function\">(<span class=\"params\">query, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Prom(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    \tajax.post(&#123;</span><br><span class=\"line\">        \turl: &lt;url&gt;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">            \tquery: query,</span><br><span class=\"line\">                ...data</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).then((&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">        \tresolve(data)</span><br><span class=\"line\">        &#125;).catch(e =&gt; &#123;</span><br><span class=\"line\">        \treject(e)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">\tpostGraphql</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>实现调用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 调度模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> queryString = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\tquery &#123;</span></span><br><span class=\"line\"><span class=\"string\">\trankList(slug: \"<span class=\"subst\">$&#123;slug&#125;</span>\", page: <span class=\"subst\">$&#123;page&#125;</span>, pageSize: <span class=\"subst\">$&#123;page_size&#125;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        userId</span></span><br><span class=\"line\"><span class=\"string\">        rank</span></span><br><span class=\"line\"><span class=\"string\">        score</span></span><br><span class=\"line\"><span class=\"string\">        user &#123;</span></span><br><span class=\"line\"><span class=\"string\">          <span class=\"subst\">$&#123;DATA_MODEL.USER&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">          glamour</span></span><br><span class=\"line\"><span class=\"string\">          level&#123;</span></span><br><span class=\"line\"><span class=\"string\">            level</span></span><br><span class=\"line\"><span class=\"string\">            exp</span></span><br><span class=\"line\"><span class=\"string\">            levelName</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> postGraphql(queryString)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>页面调用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vue 页面调用</span><br><span class=\"line\"><span class=\"keyword\">import</span> getData <span class=\"keyword\">from</span> index</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = getData(&#123;<span class=\"attr\">page</span>: <span class=\"number\">1</span>, <span class=\"attr\">slug</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">page_size</span>: <span class=\"number\">10</span>&#125;)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}